
!(function (a) {
  "use strict";
  function o() {
    var s = a(".jsFilter");
    s.isotope(),
      a(".product-filter-buttons-2").on("click", "button", function () {
        var o = a(this).attr("data-filter");
        s.isotope({ filter: o }),
          a(this).addClass("active").siblings().removeClass("active");
      });
  }
  a(window).on("load", function () {
    a("body").addClass("loaded"),
      a(".preloader-wrapper").addClass("loaded"),
      o(),
      a(".masonry").isotope();
  }),
    a(window).on("scroll", function () {
      var o = a(".scroll-to-top");
      500 <= a(window).scrollTop() ? o.addClass("show") : o.removeClass("show");
    }),
    a(document).ready(function () {
      var s;
      a(".banner-carousel").owlCarousel({
        loop: !0,
        margin: 0,
        nav: !0,
        dots: !1,
        items: 1,
        navText: [
          '<i class="fas fa-chevron-left"></i>',
          '<i class="fas fa-chevron-right"></i>',
        ],
      }),
        a(".search-toggle").on("click", function () {
          a(".search-wrapper").addClass("showSearch");
        }),
        a(".search-close-wrap, .search-close-btn").on("click", function () {
          a(".search-wrapper").removeClass("showSearch");
        }),
        a(".cm-team").waypoint(
          function (o) {
            a(".progress-bar").each(function () {
              var o = a(this).attr("data-value");
              a(this).animate({ width: o + "%", opacity: 1 });
            }),
              this.destroy();
          },
          { offset: "75%" }
        ),
        (s = a(".fluid-carousel").owlCarousel({
          loop: !0,
          margin: 30,

          dots: !0,
          responsive: {
            0: { items: 1 },
            650: { items: 2 },
            991: { items: 3 },
            1200: { items: 4 },
          },
        })),
        a(".product-filter-buttons").on("click", ".btn", function () {
          var o = a(this).data("owl-filter");
          a(".product-filter-buttons .btn").removeClass("active"),
            a(this).addClass("active"),
            s.owlcarousel2_filter(o);
        }),
        a(".team-carousel").owlCarousel({
          loop: !0,
          margin: 30,
          nav: !0,
          dots: !1,
          responsive: { 0: { items: 1 }, 991: { items: 2 } },
          navText: [
            '<i class="fas fa-chevron-left"></i>',
            '<i class="fas fa-chevron-right"></i>',
          ],
        }),
        a(".why-choose-us-carousel").owlCarousel({
          loop: !0,
          margin: 30,
          nav: !1,
          dots: !0,
          responsive: { 0: { items: 1 }, 767: { items: 2 } },
        }),
        a(".brand-carousel").owlCarousel({
          loop: !0,
          margin: 30,
          nav: !1,
          dots: !1,
          autoplay: !0,
          responsive: {
            0: { items: 2 },
            575: { items: 3 },
            991: { items: 4 },
            1200: { items: 5 },
          },
        });
    }),
    a(window).width() < 992 &&
      a(".navbar .dropdown-toggle").on("click", function (o) {
        a(this).siblings(".dropdown-menu").animate({ height: "toggle" }, 300);
      }),
    a("select").niceSelect(),
    a(".scroll-to-top").each(function () {
      a(this).click(function () {
        return a("html,body").animate({ scrollTop: 0 }, "500"), !1;
      });
    }),
    o();
})(jQuery);
//# sourceMappingURL=all.min.js.map

// testimonial js start
let testimonialIndex = 0;
let testimonialTimer;
const testimonialContainer = document.querySelector(".testimonial-container");
const testimonialSlides = document.querySelectorAll(".testimonial-slide");
const testimonialDots = document.querySelectorAll(
  ".testimonial-indicators [data-bs-slide-to]"
);
const totalSlides = testimonialSlides.length; 

console.log(totalSlides)

// Variables for drag functionality
let isDragging = false;
let startPos = 0;
let currentTranslate = 0;
let prevTranslate = 0;
let animationID = 0;
let slideWidth = testimonialContainer.clientWidth / totalSlides;

// Clone slides for infinite scrolling
function setupInfiniteCarousel() {
  // Assuming the testimonialContainer has three children (slides)
  const slides = Array.from(testimonialContainer.children);
  
  // Clone first slide and append to end
  const firstSlideClone = slides[0].cloneNode(true);
  // Clone last slide and prepend to beginning
  const lastSlideClone = slides[slides.length - 1].cloneNode(true);
  
  testimonialContainer.appendChild(firstSlideClone);
  testimonialContainer.insertBefore(lastSlideClone, slides[0]);
  
  // Adjust initial position to show the first real slide (not the clone)
  testimonialContainer.style.transform = `translateX(-33.333%)`;
  prevTranslate = -33.333;
  currentTranslate = -33.333;
  
  // Real slide index starts at 1 (0 is clone of last)
  testimonialIndex = 1;
}

function showTestimonials(n, instant = false) {
  // Calculate proper index for infinite scrolling
  // We have totalSlides + 2 elements (including clones)
  testimonialIndex = n;
  
  // Calculate the percentage to translate
  // Each slide is 33.333% wide, and we start at -33.333% (first clone)
  const translateValue = -(testimonialIndex * 33.333);
  
  if (instant) {
    // For snap transitions without animation
    testimonialContainer.style.transition = 'none';
    currentTranslate = translateValue;
    prevTranslate = translateValue;
    setSliderPosition();
    
    // Force reflow
    testimonialContainer.offsetHeight;
    
    // Restore transitions
    testimonialContainer.style.transition = 'transform 0.3s ease-out';
  } else {
    // Normal transitions
    testimonialContainer.style.transition = 'transform 0.3s ease-out';
    currentTranslate = translateValue;
    prevTranslate = translateValue;
    setSliderPosition();
  }
  
  // Handle infinite scrolling transitions
  setTimeout(() => {
    // If we're at the clone of the first slide
    if (testimonialIndex >= totalSlides + 1) {
      // Jump to the real first slide without animation
      testimonialIndex = 1;
      showTestimonials(testimonialIndex, true);
    }
    
    // If we're at the clone of the last slide
    if (testimonialIndex <= 0) {
      // Jump to the real last slide without animation
      testimonialIndex = totalSlides;
      showTestimonials(testimonialIndex, true);
    }
    
    // Update indicators (based on real slides, not clones)
    updateIndicators();
  }, 300); // Wait for transition to complete
}

function updateIndicators() {
  // Map the actual slide index (including clones) to indicator index (0-based)
  let indicatorIndex = testimonialIndex - 1;
  
  // Handle edge cases
  if (indicatorIndex < 0) indicatorIndex = totalSlides - 1;
  if (indicatorIndex >= totalSlides) indicatorIndex = 0;
  
  // Update indicators
  testimonialDots.forEach((dot, index) => {
    dot.classList.toggle("active", index === indicatorIndex);
  });
}

function setSliderPosition() {
  testimonialContainer.style.transform = `translateX(${currentTranslate}%)`;
}

function autoSlideTestimonials() {
  testimonialIndex++;
  showTestimonials(testimonialIndex);
}

function resetTestimonialTimer() {
  clearInterval(testimonialTimer);
  testimonialTimer = setInterval(autoSlideTestimonials, 6000);
}

// Add click events to indicator dots
testimonialDots.forEach((dot, index) => {
  dot.addEventListener("click", () => {
    // Convert indicator index to slide index (accounting for clone at beginning)
    testimonialIndex = index + 1;
    showTestimonials(testimonialIndex);
    resetTestimonialTimer();
  });
});

// Touch events for drag functionality
testimonialContainer.addEventListener("touchstart", touchStart);
testimonialContainer.addEventListener("touchmove", touchMove);
testimonialContainer.addEventListener("touchend", touchEnd);

// Mouse events for drag functionality
testimonialContainer.addEventListener("mousedown", touchStart);
testimonialContainer.addEventListener("mousemove", touchMove);
testimonialContainer.addEventListener("mouseup", touchEnd);
testimonialContainer.addEventListener("mouseleave", touchEnd);

function touchStart(event) {
  resetTestimonialTimer();
  testimonialContainer.style.transition = 'none';
  
  // Get starting position
  startPos = getPositionX(event);
  isDragging = true;
  
  // Stop any running animation
  cancelAnimationFrame(animationID);
  
  // Prevent default behavior (page scroll)
  event.preventDefault();
}

function touchMove(event) {
  if (isDragging) {
    const currentPosition = getPositionX(event);
    const diff = currentPosition - startPos;
    // Convert pixel movement to percentage (assuming slides, each taking 33.333%)
    const movePercentage = (diff / slideWidth) * 33.333;
    
    // Calculate new position
    currentTranslate = prevTranslate + movePercentage;
    
    setSliderPosition();
    event.preventDefault();
  }
}

function touchEnd() {
  isDragging = false;
  testimonialContainer.style.transition = 'transform 0.3s ease-out';
  
  // Determine which slide to snap to based on drag distance
  const moveDistance = currentTranslate - prevTranslate;
  
  if (moveDistance < -10) {
    // Swiped left, go to next slide
    testimonialIndex++;
  } else if (moveDistance > 10) {
    // Swiped right, go to previous slide
    testimonialIndex--;
  }
  
  // Show correct slide
  showTestimonials(testimonialIndex);
  
  // Restart timer
  resetTestimonialTimer();
}

function getPositionX(event) {
  return event.type.includes('mouse') ? event.pageX : event.touches[0].clientX;
}

// Calculate slide width on window resize
window.addEventListener('resize', () => {
  slideWidth = testimonialContainer.clientWidth / totalSlides;
});

// Initialize slider
document.addEventListener('DOMContentLoaded', () => {
  setupInfiniteCarousel();
  slideWidth = testimonialContainer.clientWidth / totalSlides;
  resetTestimonialTimer();
});
// testimonial js end

// Initialize Swiper
let swiper = new Swiper(".productsSwiper", {
  slidesPerView: 1,
  spaceBetween: 30,
  autoplay: {
    delay: 6000,
    disableOnInteraction: false,
  },
  pagination: {
    margin: 50,
    el: ".swiper-pagination",

    clickable: true,
    dots : true,
  },
  breakpoints: {
    640: {
      slidesPerView: 1,
    },
    768: {
      slidesPerView: 2,
    },
    1024: {
      slidesPerView: 3,
    },
  },
});


// Initialize Swiper


// Category filtering
document
  .querySelectorAll(".product-filter-buttons-2 .btn ")
  .forEach((button) => {
    button.addEventListener("click", () => {
      const filter = button.getAttribute("data-filter");

      // Update active button
      document
        .querySelectorAll(".product-filter-buttons-2 .btn")
        .forEach((btn) => {
          btn.classList.remove("active");
        });
      button.classList.add("active");

      // Filter slides
      const slides = document.querySelectorAll(".swiper-slide");
      slides.forEach((slide) => {
        if (
          filter === "all" ||
          slide.getAttribute("data-category").includes(filter)
        ) {
          slide.style.display = "";
        } else {
          slide.style.display = "none";
        }
      });

      // Update swiper
      swiper.update();
      swiper.slideTo(0);
    });
  });
